#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
# author:  	maxime d√©raspe
# email:	maximilien1er@gmail.com
# review:  	
# date:    	15-02-24
# version: 	0.01
# licence:  	


require 'bacterial-annotator'
require 'bacterial-comparator'
require 'bacterial-identificator'

VERSION = "0.6.6"

def print_version
  version = "Bacterial Annotator - Version #{VERSION}\n\n"
  version += "Packaged with : \n"
  version += "  -- Prodigal v2.6.2\n"
  version += "  -- BLAT standalone version\n"
  version += "  -- MAFFT v7.222\n"
  version += "  -- fasta36  v36.3.8d\n"
  version += "  -- RAxML v8.2.11\n"
  version += "  -- FastTree v2.1.10\n"
  version += "  -- MASH v2.0\n"
  puts version
end



# Usage message to print to CLI
def usage

  print <<OEM

bacterial-annotator [annotate | compare] [OPTIONS]

# Choose either to annotate a genome or compare several genome annotations

  identify  [OPTIONS]
            .. see identify -h for OPTIONS

  annotate  [OPTIONS]
            .. see annotate -h for OPTIONS

  compare   [OPTIONS] [all annotation directories]*
            .. see compare -h for OPTIONS

  --help/-h		Print this !

  --version/-v  Version of the Bacterial-Annotator

OEM

end


def usage_annotate

  print <<OEM

annotate [OPTIONS]

  // IO
    --input/-i      <fasta_file>         Provide the fasta file to annotate
    --outdir/-o     <outdir>             Output directory [default=BAnnotation]
    --name/-n       <name>               Sample name
    --force/-f                           Force to overwrite the output directory

  // MERGEM-based Annotation (Recommended)
    --db/-d         <species_dir>        From MERGEM database (include CDS and RNAs fasta)
                                         // see bacteriapps.genome.ulaval.ca/mergem

  // Reference-Based Annotation
    --refgenome/-g  <GBK_ID>             Provide a Genbank file or a Gbk Accession ID.
    --externaldb    <fasta_file>         Finish or do a complete annotation with this sequence database (protein fasta file).
                                         Fasta headers need to look similar to NCBI or EBI fasta headers
                                         EX: >gi|385721352|gb|AFI72857.1| NDM-1 [Escherichia coli]
                                             >sp|C7C422|BLAN1_KLEPN Beta-lactamase NDM-1 OS=Klebsiella pneumoniae..

  // Options
    --pidentity     <% identity>          Minimum percentage identity to incorporate a CDS annotation [default=0.8]
    --pcoverage     <% identity>          Minimum percentage of coverage over protein alignment to incorporate a CDS annotation [default=0.8]
                                          // otherwise hint for a non-functional protein
    --minlength     <length>              Minimum contig length for annotation [default=500]
    --meta                                Better for metagenome and plasmid annotations because of disparate codon usage [default=off]

OEM

end

# Parse the Options given on the CLI
def parseOptions_annotate

  options = {}

  # default options
  options[:outdir] = "BAnnotation"
  options[:pidentity] = 80
  options[:pcoverage] = 80
  options[:minlength] = 500
  options[:meta] = 0

  if ARGV.length == 0
    usage_annotate
    abort
  end

  while x = ARGV.shift

    case x.downcase
    when "--input", "-i"
      options[:input] = ARGV.shift
    when "--name", "-n"
      options[:name] = ARGV.shift
    when "--db", "-d"
      options[:mergem] = ARGV.shift
    when "--refgenome", "-g"
      options[:refgenome] = ARGV.shift
    when "--outdir", "-o"
      options[:outdir] = ARGV.shift
    when "--force", "-f"
      options[:force] = 1
    when "--minlength"
      options[:minlength] = ARGV.shift
    when "--pidentity"
      options[:pidentity] = ARGV.shift
    when "--pcoverage"
      options[:pcoverage] = ARGV.shift
    when "--meta"
      options[:meta] = 1
    when "--externaldb"
      options[:external_db] = ARGV.shift
    when "--help", "-h"
      usage_annotate
      abort
    when "--version", "-v"
      print_version
      abort
    end

  end

  options

end


def usage_compare

  print <<OEM

compare [OPTIONS]

  //IO
    --outdir/-o    <output directory>
    --proc         <nb of process> Number of process to run the comparison

  //Synteny
    --pidentity    <default 0.80> Minimal percentage identity to call a syntenic protein
    --min_cov      <default 0.80> Minimal coverage for the alignment of the protein / gene

  //Alignment (MAFFT)
    --align        [dna|prot|both] by default align only proteins
    --concat       <nb of genes>  by default 0=all

  //Phylogeny (Maximum Likelihood)
    --phylogeny    will build phylogenetic tree from the alignments files (pep or dna)
    --software     [raxml|fasttree]  (default fasttree)
    --bootstrap    <nb of bootstrap> (default 100)

OEM

end


# Parse the Options given on the CLI
def parseOptions_compare

  options = {}

  # default options
  options[:outdir] = "phylogenomics"
  options[:pidentity] = 0.8
  options[:min_cov] = 0.8
  options[:proc] = 2
  options[:align] = "prot"
  options[:genomes_list] = []
  options[:concat] = 0
  options[:phylogeny] = 0
  options[:bootstrap] = 100

  while x = ARGV.shift

    case x.downcase
    when "--outdir", "-o"
      options[:outdir] = ARGV.shift
    when "--pidentity"
      options[:pidentity] = ARGV.shift
    when "--min_cov"
      options[:min_cov] = ARGV.shift
    when "--proc", "-p"
      options[:proc] = ARGV.shift
    when "--align"
      options[:align] = ARGV.shift
    when "--concat"
      options[:concat] = ARGV.shift
    when "--phylogeny"
      options[:phylogeny] = 1
    when "--bootstrap"
      options[:bootstrap] = (ARGV.shift).to_i
    when "--help", "-h"
      usage_compare
      abort
    else
      options[:genomes_list] << x if File.exists? "#{x}"
    end

  end

  options

end


def usage_identify

  print <<OEM

identify [OPTIONS] genome_1.fasta genome_2.fasta genome_x.fasta

  //Mash Sketch
    --mash/-m      <mash sketch file>

  //IO
    --proc         <nb of process> Number of process to run the comparison

    --output       [csv,tsv|json]

OEM

end

def parseOptions_identify

  options = {}
  options[:proc] = 2
  options[:genome_list] = []
  options[:output] = "tsv"

  while x = ARGV.shift

    case x.downcase
    when "--mash", "-m"
      options[:mash_file] = ARGV.shift
    when "--proc", "-p"
      options[:proc] = ARGV.shift
    when "--output", "-o"
      options[:output] = ARGV.shift
    when "--help", "-h"
      usage_identify
      abort
    else
      if File.exists? "#{x}"
        options[:genome_list] << x
      else
        puts "#{x} file doesn't exist"
        usage_identify
        abort
      end
    end

  end

  options

end




########
# MAIN #
########

if ARGV.size >= 1

  ROOT = File.dirname(__FILE__)

  # Check for 3rd party dependencies : Prodigal, Blat, MAFFT, ...
  system("ba_prodigal")
  system("ba_blat")
  system("ba_mafft")
  system("ba_raxml")
  system("ba_diamond")
  system("ba_fasta36")
  system("ba_cdhit")
  system("ba_fasttree")
  system("ba_mash")

  options = {}

  if ARGV[0] == "annotate"

    ARGV.shift
    options = parseOptions_annotate

    if ! File.exist? ("#{ROOT}/blat.linux")
      puts "Exiting program because blat is missing"
      abort
    end

    # Check Options
    if ! options.has_key? :refgenome and
       ! options.has_key? :external_db and
       ! options.has_key? :mergem
      puts "You didn't provide a reference genome or a database for the annotation !"
    elsif ! options.has_key? :input
      puts "You didn't provide a fasta file to annotate !"
    end

    bannot = BacterialAnnotator.new(options, ROOT)
    bannot.run_annotation

  elsif ARGV[0] == "compare"

    ARGV.shift
    options = parseOptions_compare
    bcomp = BacterialComparator.new(options, ROOT)
    bcomp.run_comparison

  elsif ARGV[0] == "identify"

    ARGV.shift
    options = parseOptions_identify
    if options[:genome_list].empty?
      puts "You need at least 1 genome fasta to identify !!"
      usage_identify
      abort
    end
    bident = BacterialIdentificator.new(options, ROOT)
    bident.run_identification

  elsif ARGV[0] == "--version" or ARGV[0] == "-v"

    print_version
    abort

  else
    usage
  end

else
  usage
end
