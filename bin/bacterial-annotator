#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
# author:  	maxime d√©raspe
# email:	maxime@deraspe.net
# review:  	
# date:    	15-02-24
# version: 	0.01
# licence:  	


require 'bacterial-annotator'


# Usage message to print to CLI
def usage

  print <<OEM

bacterial-annotator [OPTIONS]

[OPTIONS]

// IO
  --input/-i		<fasta_file>	Provide the fasta file to annotate
  --outdir/-o		<outdir>	Output directory [default=BAnnotation]
  --force/-f		Force to overwrite the output directory

// Dataset
  --refgenome/-g        <GBK_ID> 	Provide a Genbank file or a Gbk Accession ID.
  --guessRef		Will guess the best reference genome to use for the annotation.

  --remotedb		<remote_database> [nr|refseq|swissprot]
			Complete the annotation of remaining CDS with a remote NCBI BLAST
			Can be very slow, better to use an external database !

  --externaldb		<proteins fasta_file>
			Complete or do the annotation of remaining CDS with this database (a protein fasta file).
			Fasta headers need to look similar to NCBI or EBI fasta headers, ex.:
			>gi|385721352|gb|AFI72857.1| NDM-1 [Escherichia coli]
			>sp|C7C422|BLAN1_KLEPN Beta-lactamase NDM-1 OS=Klebsiella pneumoniae..

// Other options
  --minlength		Minimum contig length for annotation [default=500]
  --gff			Will also generate gff annotation files [off by default]


  --help/-h		Print this !
OEM

end

# Parse the Options given on the CLI
def parseOptions

  options = {}

  # default options
  options[:outdir] = "BAnnotation"

  while x = ARGV.shift

    case x.downcase
    when "--input", "-i"
      options[:input] = ARGV.shift
    when "--refgenome", "-g"
      options[:refgenome] = ARGV.shift
    when "--outdir", "-o"
      options[:outdir] = ARGV.shift
    when "--force", "-f"
      options[:force] = 1
    when "--gff"
      options[:gff] = 1
    when "--remotedb"
      options[:remote_db] = ARGV.shift
    when "--externaldb"
      options[:external_db] = ARGV.shift
    when "--help", "-h"
      usage
    end

  end

  options

end


# Main
if ARGV.size > 1

  ROOT = File.dirname(__FILE__)
  options = parseOptions

  # Check for 3rd party dependencies : Prodigal and Blat
  system("ba_prodigal")
  system("ba_blat")

  if ! File.exist? ("#{ROOT}/blat.linux")
    abort "exiting blat is missing"
  end

  if ! options.has_key? :refgenome and ! options.has_key? :remote_db and ! options.has_key? :external_db
    puts "You didn't provide a reference genome or a database for the annotation !"
  elsif ! options.has_key? :input
    puts "You didn't provide a fasta file to annotate !"
  elsif 
    puts ""
  end

  bannot = BacterialAnnotator.new(options, ROOT)
  bannot.prepare_files_for_annotation
  bannot.run_annotation

else
  usage
end
